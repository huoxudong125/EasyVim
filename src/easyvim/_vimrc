" The plugin file for EasyVim Project

" Maintainer : HESHENG-PC(sheng.he.china@gmail.com)
" File : _vimrc
" Date : 2012/10/28 11:33:59

if exists('g:EasyVim')
    finish
endif

let g:EasyVim = '1.0.0.1'

if v:progname =~? "evim"
  finish
endif

" General {{{
    " compatible  behave very Vi compatible (not advisable)
    call EVFunc#SetEVPlugin()
    set diffexpr=EVFunc#diff()
"    set verbose=9
    set viminfo='10,<10,s10,h,rA:,rB:
"}}}


"Paths Settings {{{
    if !exists("g:EVPath")
        let g:EVPath = $VIM.'/easyvim'
    endif
    if !exists("g:EVPluginPath")
        let g:EVPluginPath = 'runtime'
    endif
    try
        for var in ["backup","swap","verbose"]
            if !isdirectory(g:EVPath.'/'.var)
                call mkdir(g:EVPath.'/'.var,'p')
            endif
        endfor
    catch /.*/
    endtry
    set backup
    set swapfile
    if has('wildignore')
        set backupskip +=*.iso,*.exe,*.deb,*.bin,*.rar,*.zip,*.gz,*.doc,*.docx,*.png,*.bmp,*.gif,*.7z,*.ppt,*.pdf
    endif
    try
        exe "set backupdir=".substitute(g:EVPath.'/backup','\s','\\\0','g')
        exe "set directory=".substitute(g:EVPath.'/swap','\s','\\\0','g')
        if exists("g:debug")
            exe "set verbosefile=".substitute(g:EVPath.'/verbose/'.localtime().'.txt','\s','\\\0','g')
        endif
    catch /.*/
    endtry
    if isdirectory('/usr/share/dict/words')
        set dictionary=/usr/share/dict/words
    elseif isdirectory('/usr/dict/words')
        set dictionary=/usr/dict/words
    else
        if !isdirectory(g:EVPath.'/dict/words')
            try
                call mkdir(g:EVPath.'/dict/words','p')
            catch /.*/
            endtry
        endif
        exe "set dictionary=".substitute(g:EVPath.'/dict/words','\s','\\\0','g')
    endif
"}}}

" Windows and Buffers {{{
    set complete=.,t,i,d
    set completeopt=menu
    set noconfirm
    set nohidden
    set bufhidden=wipe


    set equalalways

    set splitright
    set cpoptions-=a
    set autochdir
    set autoread
    set viewoptions=folds,options,cursor,slash
    set sessionoptions=blank,buffers,curdir,folds,globals,help,resize,slash,unix,winpos,winsize
"}}}

" Editing and Keyboard {{{

    set nojoinspaces
    set virtualedit=block
    set timeout
    set timeoutlen=300
    set autoindent
    "set smartindent
    set cindent
    set formatoptions=tcr2nmM
    set shiftwidth=4
    set softtabstop=4
    set tabstop=4
    set expandtab

    set backspace=indent,eol,start
    set breakat=\ -
"}}}

"Cscope             {{{
if has("cscope")
    set csprg=cscope
    set csto=0
    set csqf=s+,g+,c+,d+,i+,t+,e+
    set nocsverb
    let cscopeOutPath = fnamemodify(findfile("cscope.out",".;"),":p")
    if filereadable(cscopeOutPath)
        set cst
        exec "silent! cs add ".cscopeOutPath
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb


    nmap <unique> <C-_>s :scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <unique> <C-_>g :scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <unique> <C-_>c :scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <unique> <C-_>t :scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <unique> <C-_>e :scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <unique> <C-_>f  :simalt scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <unique> <C-_>i :scs find i <C-R>=expand("<cfile>")<CR><CR>
    nmap <unique> <C-_>d :scs find d <C-R>=expand("<cword>")<CR><CR>

    imap <unique> <C-_>s <C-o>:scs find s <C-R>=expand("<cword>")<CR><CR>
    imap <unique> <C-_>g <C-o>:scs find g <C-R>=expand("<cword>")<CR><CR>
    imap <unique> <C-_>c <C-o>:scs find c <C-R>=expand("<cword>")<CR><CR>
    imap <unique> <C-_>t <C-o>:scs find t <C-R>=expand("<cword>")<CR><CR>
    imap <unique> <C-_>e <C-o>:scs find e <C-R>=expand("<cword>")<CR><CR>
    imap <unique> <C-_>f  <C-o>:scs find f <C-R>=expand("<cfile>")<CR><CR>
    imap <unique> <C-_>i <C-o>:scs find i <C-R>=expand("<cfile>")<CR><CR>
    imap <unique> <C-_>d <C-o>:scs find d <C-R>=expand("<cword>")<CR><CR>
endif
"Plugins    {{{
    let g:html_ignore_folding =0
    let g:html_dynamic_folds =1
    let g:compiler_gcc_ignore_unmatched_lines = 1
"}}}

"Autocmd    {{{
    function! ShowMode()
        if mode() == "n"
            return "普通模式"
        elseif mode() == "i"
            return "插入模式"
        elseif mode() == "v" || mode() == "V" || mode() == "CTRL-V"
            return "可视模式"
        elseif mode() == "s" || mode() == "S" || mode() == "CTRL-S"
            return "选择模式"
        elseif mode() == "R"
            return "替换模式"
        elseif mode() == "Rv"
            return "虚拟替换模式"
        elseif mode() =~ "c" || mode() == "!"
            return "命令行模式"
        elseif mode() =~ "r"
            return "--More--"
        endif
    endfunction

    function! GetBom()
        if &bomb
            return "\|Bom"
        endif
        return ""
    endfunction

    function! AddPluginMenu()
        an <silent> 40.10 &Tools.AddPlugin :so %<CR>
    endfunction
    if has('autocmd')
        filetype on | filetype plugin on | filetype indent on | syntax on
        augroup EasyVim
        au!
            autocmd! bufwritepost _vimrc,.vimrc exe 'source '.expand('%:p')
            autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal g`\"" |
            \ endif |
            \if &fenc == '' |
            \setlocal modifiable    |
            \ set fenc=utf-8 |
            \setlocal nomodifiable  |
            \endif
            au WinEnter *   call EVFunc#enlargeWin()
            au GUIEnter * simalt ~x | call EVFunc#SetGuiFont()
            au BufWinEnter *.vba call AddPluginMenu()
            "autocmd VimLeave * mksession!
            if getfsize(expand('%:p')) == -2 || getfsize(expand('%:p')) > 20971520
                au BufReadCmd <buffer>  call EVFunc#GetLargeFile()
            endif
            au BufWinEnter,BufWritePost * if bufname("%") != "" | let b:this_buf_size=getfsize(bufname("%"))/1024
                        \| else | let b:this_buf_size=0 | endif
        augroup END
        try
            set statusline=%<[%{b:this_buf_size}KB\|%{&ff}\|%{&fileencoding}%{GetBom()}]%=%{ShowMode()}\|%(行:%l%)\|%(列:%v%)\|%p%%
        catch /.*/
            set statusline=%<[%{&ff}\|%{&fileencoding}%{GetBom()}]%=%{ShowMode()}\|%(行:%l%)\|%(列:%v%)\|%p%%
        endtry
    else
        set statusline=%<[%{&ff}\|%{&fileencoding}%{GetBom()}]%=%{ShowMode()}\|%(行:%l%)\|%(列:%v%)\|%p%%
    endif
"}}}

"MAP  Settings  {{{
    function! InitCscope()
        if has("win32") || has("win64") || has("win16")
            silent! !dir /s /b *.c,*.cc,*.cpp,*.h,*.java > cscope.files
        else
            silent! !find -maxdepth 1000 -name "*.[c|h]" >cscope.files
            silent! !find -maxdepth 1000 -name "*.cpp" >> cscope.files
            silent! !find -maxdepth 1000 -name "*.java" >>cscope.files
        endif
        silent! !cscope -Rb
        set cst
        let cscopeOutPath = fnamemodify(findfile("cscope.out",".;"),":p")
        if filereadable(cscopeOutPath)
            exec "silent! cs add ".cscopeOutPath
        endif
    endfunction
    source $VIMRUNTIME/mswin.vim
    behave mswin
    imap <silent> <ESC>                                 <C-L>
    inoremap <silent> <C-Up>                            <C-o>:call EVFunc#ToWin('up')<CR>
    nnoremap <silent> <C-Up>                            :call EVFunc#ToWin('up')<CR>
    inoremap <silent> <C-Down>                          <C-o>:call EVFunc#ToWin('down')<CR>
    nnoremap <silent> <C-Down>                          :call EVFunc#ToWin('down')<CR>
    inoremap <silent> <C-left>                          <C-o>:call EVFunc#ToWin('left')<CR>
    nnoremap <silent> <C-left>                          :call EVFunc#ToWin('left')<CR>
    inoremap <silent> <C-right>                         <C-o>:call EVFunc#ToWin('right')<CR>
    nnoremap <silent> <C-right>                         :call EVFunc#ToWin('right')<CR>
    inoremap <silent> <S-left>                          <C-o><C-W>>
    nnoremap <silent> <S-left>                          <C-W>>
    inoremap <silent> <S-right>                         <C-o><C-W><
    nnoremap <silent> <S-right>                         <C-W><
    inoremap <silent> <S-Up>                            <C-o>:resize +1<CR>
    nnoremap <silent> <S-Up>                            :resize +1<CR>
    inoremap <silent> <S-Down>                          <C-o>:resize -1<CR>
    nnoremap <silent> <S-Down>                          :resize -1<CR>
    inoremap <silent> <C-Insert>                        <C-o>:new<CR>
    nnoremap <silent> <C-Insert>                        :new<CR>
    inoremap <C-t>                                      <C-l><C-t><ESC>
    inoremap <C-]>                                      <C-l><C-]><ESC>
    inoremap <A-Left>                                   <C-l><C-t><ESC>
    inoremap <A-Right>                                  <C-l><C-]><ESC>
    nnoremap <A-Left>                                   <C-t>
    nnoremap <A-Right>                                  <C-]>
    inoremap <ESC><ESC>                                 <C-o>:
    nnoremap <ESC><ESC>                                 :
    inoremap <silent> gf                                <C-o><C-w>gF
    nnoremap <silent> gf                                <C-w>gF
    inoremap <silent> <F10>                             <C-o>:silent! !ctags -R .<CR>
    nnoremap <silent> <F10>                             :silent! !ctags -R .<CR>
    inoremap <silent> <S-F10>                           <C-o>:call InitCscope()<CR>
    nnoremap <silent> <S-F10>                           :call InitCscope()<CR>
    inoremap <silent> <F12>                             <C-o>:wincmd w<CR>
    nnoremap <silent> <F12>                             :wincmd w<CR>
    inoremap <silent> <S-F12>                           <C-o>:call EVFunc#ToWin('right')<CR>
    nnoremap <silent> <S-F12>                           :call EVFunc#ToWin('right')<CR>
    imap <unique>     <S-Enter>                         <C-o>:o<CR><CR>
    nmap <unique>     <S-Enter>                         o
    imap <unique>     <C-w>                             <C-o>:q!<CR><CR>
    nmap <unique>     <C-w>                             :q!<CR><CR>
    vmap <silent>     <C-j>                             :call EVFunc#Join()<CR><CR>
"}}}
" vim:foldmethod=marker
